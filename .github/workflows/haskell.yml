# Runs on any push to main.
# Produces optimised mac binaries and runs unit/doc/functional tests,
# using the default stack.yaml's GHC version.

name: Build and release binary on mac-x64

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    strategy:
      fail-fast: false

    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Confirm all remaining steps should run
        run: echo "CONTINUE=true" >> $GITHUB_ENV

      # things to be cached/restored:

      - name: Cache stack global package db
        id: stack-global
        uses: actions/cache@v3
        with:
          path: ~/.stack
          key: ${{ runner.os }}-stack-global-${{ hashFiles('**.yaml') }}
          restore-keys: |
            ${{ runner.os }}-stack-global
        if: env.CONTINUE

      # - name: Cache stack-installed programs in ~/.local/bin
      #   id: stack-programs
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.local/bin
      #     key: ${{ runner.os }}-stack-programs-${{ hashFiles('**.yaml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-stack-programs
      #   if: env.CONTINUE

      - name: Cache .stack-work
        uses: actions/cache@v3
        with:
          path: .stack-work
          key: ${{ runner.os }}-stack-work-${{ hashFiles('**.yaml') }}
          restore-keys: |
            ${{ runner.os }}-stack-work
        if: env.CONTINUE

      - name: Install stack
        run: |
          mkdir -p ~/.local/bin
          export PATH=~/.local/bin:$PATH        
          if [[ ! -x ~/.local/bin/stack ]]; then brew install gnu-tar; curl -sL https://get.haskellstack.org/stable/osx-x86_64.tar.gz | gtar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'; chmod a+x ~/.local/bin/stack; fi
          stack --version
        if: env.CONTINUE

      - name: Install GHC (with stack)
        env:
          stack: ${{ matrix.plan.stack }}
        run: |
          stack setup --install-ghc
        if: env.CONTINUE

      - name: Install Monomer dependecies
        run: brew install sdl2 glew
        if: env.CONTINUE

      - name: Install haskell deps
        env:
          stack: ${{ matrix.plan.stack }}
        run: |
          stack build --test --only-dependencies --dry-run
          stack build --test --only-dependencies
        if: env.CONTINUE

      - name: Build the project and test unit tests, doc tests
        env:
          stack: ${{ matrix.plan.stack }}
        run: |
          stack install --test --force-dirty --ghc-options=-fforce-recomp
          # stack install --test --force-dirty --ghc-options=-fforce-recomp --pedantic
        if: env.CONTINUE

      # - name: Install shelltestrunner
      #   env:
      #     stack: ${{ matrix.plan.stack }}
      #   run: |
      #     export PATH=~/.local/bin:$PATH
      #     if [[ ! -x ~/.local/bin/shelltest ]]; then stack install shelltestrunner-1.9; fi
      #     shelltest --version
      #   if: env.CONTINUE
      #
      # - name: Test functional tests (excluding addons)
      #   env:
      #     stack: ${{ matrix.plan.stack }}
      #   run: |
      #     export PATH=~/.local/bin:$PATH
      #     COLUMNS=80 stack exec -- shelltest --execdir -j16 filenames/test -x /_ -x /addons -x ledger-compat/baseline -x ledger-compat/regress -x ledger-compat/collected # bin
      #   if: env.CONTINUE
      #
      # artifacts:

      - name: Gather binaries
        run: |
          mkdir -p tmp
          cd tmp
          cp ~/.local/bin/filenames .
          strip filenames
          tar cvf filenames-mac-x64.tar filenames
        if: env.CONTINUE

      # upload-artifact loses execute permissions, so we tar the binaries to preserve them.
      # github UI always zips artifacts when they are downloaded, so we don't bother compressing the tar.
      # Unfortunately it means users must both unzip and untar.
      - name: Upload binaries artifact
        uses: actions/upload-artifact@v3
        with:
          name: filenames-mac-x64
          path: tmp/filenames-mac-x64.tar
        if: env.CONTINUE
  # release:
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   steps:
  #     - uses: actions/checkout@master
  #     - name: Create release
  #       uses: Roang-zero1/github-create-release-action@v2
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Upload release artifacts
  #       uses: Roang-zero1/github-upload-release-artifacts-action@v2
  #       with:
  #         args: "tmp/filenames-mac-x64.tar filenames filenames-mac-x64.tar"
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
